컬렉션 프레임워크란?

프로그램 개발 건물 짓는 일에 비유 > 원하는 건물 잘 지으려면 구조를 잘 잡아야함
프로그램 개발 > 사용하는 자료를 어떤 구조로 관리할 것인가가 중요함.
이 때 사용하는 것이 자료구조
자료구조는 프로그램 실행중에 메모리에 자료를 유지, 관리하기 위해 사용한다.

JAVA 에서는 자료구조를 미리 구현해서 java.util 패키지에서 제공함
이를 컬렉션 프레임워크라고 함.

이런 자료구조는 개발자가 필요할 때 직접 구현해서 사용하기도 함.

자바가 라이브러리를 어떻게 제공하는지, 그 라이브러리를 어떻게 사용할 수 있는지

========================
컬렉션 인터페이스

collection 하위에 List Set 인터페이스가 있음.
List 순차적인 자료를 관리하는데 사용하는 클래스
Set 집합을 떠올리면 됨, 순서와 상관없이 중복을 허용 X
    id같은 중복되지 않는 객체를 다룰 때 사용함


Map 인터페이스
쌍으로 이루어진 자료들을 관리하는 메서드들이 선언되어있음.
key - value 여기서 key 중복 될수없음.

사람의 정보
Key  Value
이름  이지수
나이  30
직업  회사원
취미  수영, 테니스
특기  수영


List 인터페이스
객체를 순서에 따라 저장하고 유지하는 데 필요한 메소드 선언되어 있다.
순차 자료구조의 대표적 예시는 배열
자바에 배열을 구현한 대표 클래스는 ArrayList, Vector
배열이랑 구현 방식은 다르지만 순차 자료 구조를 구현한 LinkedList


ArrayList
객체 배열을 구현한 클래스
회원 관리 프로그램을 구현 해볼 것

실습!
ArrayList 특정 위치에 회원 추가하는 메소드를 작성
회원 추가할 때 맨뒤가 아니라 특정위치에 추가하는 메소드를 만들고
insertMember 메소드 파라미터 Member int position
position < 0
arraySize 현재 4  5가능  6 7불가능


Vector 클래스
배열을 구현한 클래스
ArrayList 가장 큰 차이는 동기화 지원 여부
Vector 동기화 지원

동기화는 두 개 이상의 스레드가 동시에 Vector를 사용할 때
오류가 나지 않도록 실행 순서를 보장하는 것.
스레드는 간단히 말해서 작업 단위이다.
프로그램이 메모리에서 수행되려면 스레드작업이 생성이 되야함.
이 때 하나의 스레드만 생성되면 single thread
두 개 이상의 스레드가 생성되면 multi thread
두 개이상의 스레드가 실행되면 같은 메모리 공간에 접근할 수도 있다.
변수 값이나 메모리 상태에 오류가 발생할 가능성이 있음.
메모리에 동시에 접근하지 못하도록 순서를 맞추는것이 동기화!!


LinkedList 클래스
배열은 처음 배열 생성할 때 정적 크기로 생성
물리적 순서, 논리적 순서가 동일하다.
처음 선언한 배열 크기 이상으로 요소가 추가되는 경우
크기가 더 큰 배열을 생성하고 원래 배열의 요소를 복사를 해주고 추가할 수 있음.
이런 단점을 개선한 것이 Linked List

링크드 리스트의 각 요소는 다음 요소를 가리키는 주소 값을 가지고 있다.
물리적 메모리는 떨어져 있어도 논리적으로는 앞뒤 순서가 있다.
중간에 자료를 넣고 제거하는데 시간이 적게 걸리는 장점
크기를 동적으로 증가시킬 수 있다.


링크드 리스트에 요소 추가

링크드리스트는 요소를 추가할 때마다 동적으로 요소의 메모리를 생성한다.

링크드 리스트의 단점
어떤 요소의 위치(i)를 찾을때
배열은 물리적으로 연결된 자료구조 i번째 요소의 메모리 위치를 바로 계산할 수있다.

자료의 변동(삽입,삭제)가 빈번하게 일어나는 경우에는 링크드 리스트 효율적
자료 변동이 거의 없는 경우에는 배열 사용하는게 효율적

ArrayList Stack Queue 구현

프로그램 개발할 때 자주 사용되는 자료구조 중의 하나 > Stack Queue

스택 자료 추가 push
자료 꺼내는 것을 pop
스택에 가장 최근에 추가된자료 top


순서가 없는 Set 인터페이스
MemberArrayList 의 for문에 있는
get(i) 메서드를 사용할 수 없음

이 때 iterator(반복자)를 사용
Collection 인터페이스를 구현한 객체에 미리 정의되어있는
iterator() 메소를 호출해서 참조










