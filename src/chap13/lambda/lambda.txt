자바는 객체를 기반으로 프로그래밍을 함
어떤 기능이 필요하다고 하면 클래스를 먼저 만들고
기능을 구현한 메소드를 만들고 그 메소드를 호출함

프로그래밍 언어중에서 함수의 구현과 호출만으로 프로그램을 만들 수 있는데
이걸 함수형 프로그래밍

자바에서 제공하는 함수형 프로그래밍을 람다식(Lambda Expression)

int add(int x, int y) {
    return x + y;
}
(int x, int y) -> {return x+y;}


*람다식 문법
매개변수 자료형과 괄호 생략
매개변수 자료형 생략 가능,
매개변수 하나일 때 괄호 생략 가능
str -> System.out.println("str");

중괄호 생략 - 중괄호 안의 구현 부분이 한 문장인 경우 생략 가능
return 생략 - 중괄호 안의 구현부분이 return문 하나라면 return생략 가능

람다식은 메서드 이름이 없고
메서드를 실행하는데 필요한 매개변수와
매개변수를 활용한 실행 코드를 구현하는 것

자바에서는 함수형 인터페이스를 만들고
인터페이스에 람다식으로 구현할 메서드를 선언하는 것
람다식은 하나의 메서드를 구현해서 인터페이스형 변수에
대입하므로 인터페이스가 두 개 이상의 메소드를 가질 수 없다.

메서드 구현부를 클래스에 만들고 이를 다시 인스턴스로
생성하고 호출하는 코드가 줄기 때문에
기존의 방식보다 간결한 코드를 작성할 수 있다.

*익명 객체를 생성하는 람다식
람다식에서는 객체 없이 인터페이스 구현만으로 메서드를 호출할 수 있다.

람다식으로 구현된 메소드도
변수에 대입해 사용할 수 있고
매개변수로 전달하고 반환할 수 있다.






















